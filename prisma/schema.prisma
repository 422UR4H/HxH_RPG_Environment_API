// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  MASTER
  ASSISTANT
  PLAYER
}

model Profile {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  description      String?  @db.VarChar(255)
  briefDescription String?  @db.VarChar(64)
  birthday         DateTime @db.Date()
  avatarUrl        String?
  backgroundImgUrl String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userId      String @unique @db.Uuid
  characterId String @unique @db.Uuid

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("profiles")
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  nick     String   @unique @db.VarChar(16)
  email    String   @unique @db.VarChar(32)
  password String   @db.VarChar(255)
  profile  Profile?
  role     Role     @default(PLAYER)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  character Character[]

  @@unique([nick, email])
  @@map("users")
}

model Character {
  id      String   @id @default(uuid()) @db.Uuid
  nick    String   @unique @db.VarChar(16)
  exp     Int      @default(0)
  profile Profile?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("characters")
}
